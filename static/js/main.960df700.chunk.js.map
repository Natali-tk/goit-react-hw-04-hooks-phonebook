{"version":3,"sources":["components/ContactForm/ContactForm.module.css","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","App.js","reportWebVitals.js","index.js","components/ContactList/ContactList.module.css","components/Filter/Filter.module.css"],"names":["module","exports","ContactForm","onSubmitContact","useState","name","setName","number","setNumber","handleChange","e","target","value","reset","onSubmit","preventDefault","className","s","form","lable","input","type","pattern","title","onChange","required","submitBtn","PropsType","PropTypes","func","isRequired","ContactList","contacts","onDeleteClick","contactList","map","id","contact","icon","buttonDelete","onClick","Filter","changeFilterInput","findFild","inputFind","App","JSON","parse","window","localStorage","getItem","initialContacts","setContacts","filter","setFilter","useEffect","setItem","stringify","addContact","uuidv4","find","toLowerCase","alert","prevContacts","includes","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.960df700.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__2kMnz\",\"lable\":\"ContactForm_lable__3lx2T\",\"input\":\"ContactForm_input__xFUvd\",\"submitBtn\":\"ContactForm_submitBtn__L2U7o\"};","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport s from './ContactForm.module.css';\r\nexport default function ContactForm({onSubmitContact}) {\r\n  const[name,setName]=useState('');\r\n  const[number,setNumber]=useState('');\r\n  \r\n  const handleChange = e => {\r\n    const {name, value}= e.target;\r\n    switch(name){\r\n      case 'name':\r\n        setName(value);\r\n        break;\r\n      case 'number':\r\n        setNumber(value);\r\n        break;\r\n      default:\r\n        return;\r\n    }\r\n  }\r\n  \r\n  \r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n    onSubmitContact({name, number});\r\n    reset();\r\n  };\r\n  const reset=()=>{\r\n    setName('');\r\n    setNumber('');\r\n  }\r\n  \r\n \r\n    return (\r\n      <form onSubmit={handleSubmit} className={s.form}>\r\n        <label className={s.lable}>\r\n          Name\r\n          <input\r\n            className={s.input}\r\n            type=\"text\"\r\n            name=\"name\"\r\n            value={name}\r\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n            onChange={handleChange}\r\n            required\r\n          />\r\n        </label>\r\n\r\n        <label className={s.lable}>\r\n          Number\r\n          <input\r\n            className={s.input}\r\n            type=\"tel\"\r\n            name=\"number\"\r\n            value={number}\r\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n            onChange={handleChange}\r\n            required\r\n          />\r\n        </label>\r\n\r\n        <button type=\"submit\" className={s.submitBtn}>\r\n          Add contact\r\n        </button>\r\n      </form>\r\n    );\r\n  }\r\n\r\nContactForm.PropsType = {\r\n  onSubmit: PropTypes.func.isRequired,\r\n};\r\n\r\n\r\n","import PropTypes from 'prop-types';\r\nimport { MdContactPhone } from 'react-icons/md';\r\nimport s from './ContactList.module.css';\r\n\r\nexport default function ContactList({ contacts, onDeleteClick }) {\r\n  return (\r\n    <ul className={s.contactList}>\r\n      {contacts.map(({ id, name, number }) => {\r\n        return (\r\n          <li key={id} className={s.contact}>\r\n            <MdContactPhone className={s.icon} />\r\n            <p>\r\n              {name}: {number}\r\n            </p>\r\n            <button\r\n              className={s.buttonDelete}\r\n              type=\"button\"\r\n              onClick={() => onDeleteClick(id)}\r\n            >\r\n              Delete\r\n            </button>\r\n          </li>\r\n        );\r\n      })}\r\n    </ul>\r\n  );\r\n}\r\n\r\nContactList.propTypes = {\r\n  contacts: PropTypes.array.isRequired,\r\n  onDeleteClick: PropTypes.func.isRequired,\r\n};\r\n","import PropTypes from 'prop-types';\r\nimport s from './Filter.module.css';\r\n\r\nexport default function Filter  ({ value, changeFilterInput }){\r\n  return(\r\n<label className={s.findFild}>\r\n    Find contacts by name\r\n    <input\r\n      className={s.inputFind}\r\n      type=\"text\"\r\n      name=\"filter\"\r\n      value={value}\r\n      onChange={changeFilterInput}\r\n    />\r\n  </label>\r\n  );\r\n};\r\n\r\nFilter.propTypes = {\r\n  value: PropTypes.string.isRequired,\r\n  changeFilterInput: PropTypes.func.isRequired,\r\n};\r\n\r\n","import React, { useState, useEffect } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport ContactForm from './components/ContactForm/ContactForm';\nimport ContactList from './components/ContactList/ContactList';\nimport Filter from './components/Filter/Filter';\nimport initialContacts from './data.json';\n\nexport default function App() {\n  const [contacts, setContacts] = useState(() => {\n    return (\n      JSON.parse(window.localStorage.getItem('contacts')) ?? initialContacts\n    );\n  });\n  const [filter, setFilter] = useState('');\n\n  useEffect(() => {\n    window.localStorage.setItem('contacts', JSON.stringify(contacts));\n  }, [contacts]);\n\n  const submitContact = ({ name, number }) => {\n    const addContact = {\n      id: uuidv4(),\n      name,\n      number,\n    };\n\n    contacts.find(\n      contact => contact.name.toLowerCase() === addContact.name.toLowerCase(),\n    )\n      ? alert(`${name} is already in contacts`)\n      : setContacts(prevContacts => [addContact, ...prevContacts]);\n  };\n  const deleteContact = id => {\n    setContacts(prevContacts =>\n      prevContacts.filter(contact => contact.id !== id),\n    );\n  };\n\n  const changeFilterInput = e => {\n    setFilter(e.target.value);\n  };\n  const onFilteredContacts = () => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase()),\n    );\n  };\n\n  return (\n    <div>\n      <h1>Phonebook</h1>\n      <ContactForm onSubmitContact={submitContact} />\n      <h2>Contacts </h2>\n      <Filter value={filter} changeFilterInput={changeFilterInput} />\n      <ContactList\n        contacts={onFilteredContacts()}\n        onDeleteClick={deleteContact}\n      />\n    </div>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contact\":\"ContactList_contact__1wbpw\",\"buttonDelete\":\"ContactList_buttonDelete__1Wx3o\",\"icon\":\"ContactList_icon__mOvsP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"findFild\":\"Filter_findFild__2CCI7\",\"inputFind\":\"Filter_inputFind__2EUQU\"};"],"sourceRoot":""}